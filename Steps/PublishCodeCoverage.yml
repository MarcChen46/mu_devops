## @file
# Azure Pipelines step template to merge and publish all code coverage results.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: checkout_self
  displayName: Perform self checkout step
  type: boolean
  default: true
- name: setup_python
  displayName: Setup Python
  type: boolean
  default: true

- name: reorganize_by_inf
  displayName: Reorganize cobertura report by INF # Requires stuart_report & stuart_parse
  type: boolean
  default: false
- name: extra_parse_args
  displayName: Extra arguments for stuart_parse
  type: string
  default: ''
- name: build_file
  displayName: Stuart Build File
  type: string
  default: ".pytool/CISettings.py"
- name: publish_target 
  displayName: Publish Code Coverage Target
  type: string
  default: '' # 'codecov', 'ado'
- name: coverage_file_location
  displayName: Download from Artifacts
  type: string
  default: '' # 'artifact', 'local'

steps:
- ${{ if eq(parameters.checkout_self, true) }}:
  - checkout: self
    clean: true
    fetchDepth: 1

- ${{ if eq(parameters.setup_python, true ) }}:
  - template: SetupPythonPreReqs.yml
    parameters:
      install_python: true
#
# Download the build
#
- ${{ if eq(parameters.coverage_file_location, 'artifact') }}:
  - task: DownloadPipelineArtifact@2
    name: DownloadBuildLogArtifacts
    displayName: Download Log Artifacts
    inputs:
      buildType: 'current'
      targetPath: '$(Build.ArtifactStagingDirectory)/coverage/'
      itemPattern: "**/*coverage.xml"

  - powershell: |
      $coverage_file_count=(Get-ChildItem $(Build.ArtifactStagingDirectory)/coverage/ -Recurse -Include *coverage.xml).count
      Write-Host echo "##vso[task.setvariable variable=coverage_file_count]$coverage_file_count"
    displayName: Check For Coverage Files

  - task: CmdLine@2
    displayName: Merge Coverage Reports
    inputs:
      script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Build.ArtifactStagingDirectory)/coverage/**/*coverage.xml -targetdir:$(Build.ArtifactStagingDirectory)/Coverage -reporttypes:Cobertura
    condition: gt(variables.coverage_file_count, 0)

- ${{ elseif eq(parameters.coverage_file_location, 'local') }}:
  - task: PythonScript@0
    displayName: Check For Coverage File
    inputs:
      scriptSource: 'inline'
      script: |
        import pathlib
        import shutil
        cov_path = pathlib.Path(r"$(Build.SourcesDirectory)", "Build", "coverage.xml")
        if cov_path.exists():
          target_path = pathlib.Path(r"$(Build.ArtifactStagingDirectory)", "Coverage")
          target_path.mkdir(parents=True, exist_ok=True)
          shutil.copy(cov_path, target_path)
          print('##vso[task.setvariable variable=coverage_file_count]1')
        else:
          print('##vso[task.setvariable variable=coverage_file_count]0')

- ${{ else }}:
  - task: CmdLine@2
    displayName: Missing coverage_file_location
    inputs:
      script: exit 1

- ${{ if eq(parameters.reorganize_by_inf, true) }}:
  - task: CmdLine@2
    displayName: Parse Workspace
    inputs:
      script: stuart_parse -c ${{ parameters.build_file }} ${{ parameters.extra_parse_args }}
    condition: gt(variables.coverage_file_count, 0)

  - task: CmdLine@2
    displayName: Organize report by INF
    inputs:
      script: stuart_report coverage $(Build.ArtifactStagingDirectory)/Coverage/coverage.xml --by-package -o $(Build.ArtifactStagingDirectory)/Coverage/coverage.xml
    condition: gt(variables.coverage_file_count, 0)

- ${{ if eq(parameters.publish_target, 'ado') }}:
  - task: PublishCodeCoverageResults@2
    displayName: Publish Code Coverage
    inputs:
      summaryFileLocation: '$(Build.ArtifactStagingDirectory)/Coverage/coverage.xml'
    condition: gt(variables.coverage_file_count, 0)

- ${{ elseif eq(parameters.publish_target, 'codecov') }}:
  - template: UploadCodeCoverage.yml
    parameters:
      report_dir: '$(Build.ArtifactStagingDirectory)/Coverage'
      codecov_token: ${{ variables.CODECOV_TOKEN }}
      install_dependencies: true

- ${{ else }}:
  - task: CmdLine@2
    displayName: Missing publish_target
    inputs:
      script: exit 1
