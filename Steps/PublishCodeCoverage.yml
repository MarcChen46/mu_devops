## @file
# Azure Pipelines step template to merge and publish all code coverage results.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: checkout_self
  displayName: Perform self checkout step
  type: boolean
  default: true
- name: setup_python
  displayName: Setup Python
  type: boolean
  default: true
- name: reorganize_by_inf
  displayName: Reorganize cobertura report by INF # Requires stuart_report & stuart_parse
  type: boolean
  default: false
- name: extra_parse_args
  displayName: Extra arguments for stuart_parse
  type: string
  default: ''
- name: build_file
  displayName: Stuart Build File
  type: string
  default: ".pytool/CISettings.py"

steps:
- ${{ if eq(parameters.checkout_self, true) }}:
  - checkout: self
    clean: true
    fetchDepth: 1

- ${{ if eq(parameters.setup_python, true ) }}:
  - template: SetupPythonPreReqs.yml
    parameters:
      install_python: true
#
# Download the build
#
# - task: DownloadPipelineArtifact@2
#   name: DownloadBuildLogArtifacts
#   displayName: Download Log Artifacts
#   inputs:
#     buildType: 'current'
#     targetPath: '$(Build.ArtifactStagingDirectory)/coverage/'
#     itemPattern: "**/*coverage.xml"

# - powershell: |
#     $coverage_file_count=(Get-ChildItem $(Build.ArtifactStagingDirectory)/coverage/ -Recurse -Include *coverage.xml).count
#     Write-Host echo "##vso[task.setvariable variable=coverage_file_count]$coverage_file_count"
#   displayName: Check For Coverage Files

# - task: CmdLine@2
#   displayName: Merge Coverage Reports
#   inputs:
#     script: |
#       dotnet tool install -g dotnet-reportgenerator-globaltool
#       reportgenerator -reports:$(Build.ArtifactStagingDirectory)/coverage/**/*coverage.xml -targetdir:$(Build.ArtifactStagingDirectory)/Coverage -reporttypes:Cobertura
#   condition: gt(variables.coverage_file_count, 0)

- task: PythonScript@0
  displayName: Check For Coverage File
  inputs:
    scriptSource: 'inline'
    script: |
      import pathlib
      if pathlib.Path(r"$(Build.SourcesDirectory)", "Build", "coverage.xml").exists():
        print('##vso[task.setvariable variable=coverage_file]true')
      else:
        print('##vso[task.setvariable variable=coverage_file]false')

- ${{ if eq(parameters.reorganize_by_inf, true) }}:
  - task: CmdLine@2
    displayName: Parse Workspace
    inputs:
      script: stuart_parse -c ${{ parameters.build_file }} ${{ parameters.extra_parse_args }}
    condition: eq(variables.coverage_file, true)

  - task: CmdLine@2
    displayName: Organize report by INF
    inputs:
      script: stuart_report coverage $(Build.SourcesDirectory)/Build/coverage.xml --by-package -o $(Build.SourcesDirectory)/Build/coverage.xml
    condition: eq(variables.coverage_file, true)

- task: PublishCodeCoverageResults@2
  displayName: Publish Code Coverage
  inputs:
    summaryFileLocation: '$(Build.SourcesDirectory)/Build/coverage.xml'
  condition: eq(variables.coverage_file, true)
