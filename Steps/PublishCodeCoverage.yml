## @file
# Azure Pipelines step template to merge and publish all code coverage results.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: checkout_self
  displayName: Perform self checkout step
  type: boolean
  default: true

steps:
- ${{ if eq(parameters.checkout_self, true) }}:
  - checkout: self
    clean: true
    fetchDepth: 1

#
# Download the build
#
- task: UsePythonVersion@0
  inputs:
    versionSpec: ">=3.10.6"
    architecture: x64

- task: CmdLine@2
  displayName: Install Special Pytool Extensions
  inputs:
    script: |
      pip install --upgrade git+https://github.com/javagedes/edk2-pytool-extensions@report-parser-sqlite3
      pip install --upgrade git+https://github.com/javagedes/edk2-pytool-library@parser-updates

- task: DownloadPipelineArtifact@2
  name: DownloadBuildLogArtifacts
  displayName: Download Log Artifacts
  inputs:
    buildType: 'current'
    targetPath: '$(Build.ArtifactStagingDirectory)/coverage/'
    itemPattern: "**/*coverage.xml"

- task: DownloadPipelineArtifact@2
  name: DownloadBuildDatabaseArtifact
  displayName: Download Log Artifacts
  inputs:
    buildType: 'current'
    targetPath: '$(Build.ArtifactStagingDirectory)/database/'
    itemPattern: "**/*DATABASE.db"

- powershell: |
    $coverage_file_count=(Get-ChildItem $(Build.ArtifactStagingDirectory)/coverage/ -Recurse -Include *coverage.xml).count
    Write-Host echo "##vso[task.setvariable variable=coverage_file_count]$coverage_file_count"
  displayName: Check For Coverage Files

- task: CmdLine@2
  displayName: Create Coverage Report
  inputs:
    script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Build.ArtifactStagingDirectory)/coverage/**/*coverage.xml -targetdir:$(Build.ArtifactStagingDirectory) -reporttypes:Cobertura
  condition: gt(variables.coverage_file_count, 0)

- task: CmdLine@2
  displayName: Convert Coverage Report
  inputs:
    script: stuart_report -db $(Build.ArtifactStagingDirectory)/database/**/*.db coverage -o $(Build.ArtifactStagingDirectory)/Coverage/Cobertura.xml $(Build.ArtifactStagingDirectory)/Cobertura.xml --by-package
  condition: gt(variables.coverage_file_count, 0)

- task: PythonScript@0
  displayName: Detect Coverage
  inputs:
    scriptSource: 'inline'
    script: |
      import json
      results = json.load(open('$(Build.ArtifactStagingDirectory)/Coverage/Cobertura.json'))

      all_files = len(results)
      covered_files = len([file for file, covered in results.items() if covered])

      print(covered_files / all_files)
      # print(f'##vso[task.complete result=Failed;]Failed coverage check')

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/Coverage/Cobertura.xml'
  condition: gt(variables.coverage_file_count, 0)
